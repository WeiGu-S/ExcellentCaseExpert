name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, 3.10, 3.11, 3.12]
        exclude:
          # 减少测试矩阵大小，只在Ubuntu上测试所有Python版本
          - os: windows-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.10
          - os: macos-latest
            python-version: 3.9
          - os: macos-latest
            python-version: 3.10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-chi-sim
        sudo apt-get install -y xvfb  # 用于UI测试

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract tesseract-lang

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows上的Tesseract安装
        choco install tesseract

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # 退出零表示所有检查通过，GitHub将解释为成功
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Type checking with mypy
      continue-on-error: true  # 类型检查失败不阻止构建
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      env:
        # 设置测试环境变量
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -m pytest tests/integration/ -v --tb=short

    - name: Run UI tests (Ubuntu with xvfb)
      if: matrix.os == 'ubuntu-latest'
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
      run: |
        # 启动虚拟显示
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        python -m pytest tests/ui/ -v --tb=short

    - name: Run UI tests (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -m pytest tests/ui/ -v --tb=short

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate test report
      if: always()
      run: |
        python -m pytest --html=report.html --self-contained-html tests/ || true

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report-${{ matrix.os }}-py${{ matrix.python-version }}
        path: report.html

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with Safety
      run: |
        safety check --json || true

    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        python -m pytest tests/ -k "benchmark" --benchmark-json=benchmark.json || true

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json