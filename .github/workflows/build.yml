name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-chi-sim
        sudo apt-get install -y upx-ucl  # UPX压缩工具

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract tesseract-lang
        brew install upx

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install tesseract
        choco install upx

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Create assets directory
      run: |
        mkdir -p assets
        # 创建占位符图标文件
        touch assets/icon.png

    - name: Build executable
      run: |
        python build.py

    - name: Test executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # 在虚拟显示器上测试
        export QT_QPA_PLATFORM=offscreen
        ./dist/TestCaseGenerator --version || echo "GUI app test completed"

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows GUI测试
        ./dist/TestCaseGenerator.exe --version || echo "GUI app test completed"

    - name: Test executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS GUI测试
        ./dist/TestCaseGenerator --version || echo "GUI app test completed"

    - name: Create distribution package
      run: |
        mkdir -p packages
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../packages/TestCaseGenerator-${{ github.ref_name || github.event.inputs.version }}-windows.zip *
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          tar -czf ../packages/TestCaseGenerator-${{ github.ref_name || github.event.inputs.version }}-macos.tar.gz *
        else
          tar -czf ../packages/TestCaseGenerator-${{ github.ref_name || github.event.inputs.version }}-linux.tar.gz *
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TestCaseGenerator-${{ matrix.os }}
        path: packages/*

    - name: Calculate checksums
      run: |
        cd packages
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile *.zip SHA256 > checksums.txt
        else
          shasum -a 256 * > checksums.txt
        fi

    - name: Upload checksums
      uses: actions/upload-artifact@v3
      with:
        name: checksums-${{ matrix.os }}
        path: packages/checksums.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release notes
      run: |
        echo "# 测试用例生成器 ${{ github.ref_name || github.event.inputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## 新功能" >> release_notes.md
        echo "- 基于AI的PRD文档测试用例生成" >> release_notes.md
        echo "- 支持多种文档格式（PNG、JPG、PDF、Word）" >> release_notes.md
        echo "- OCR文字识别和结构化信息提取" >> release_notes.md
        echo "- 测试用例自动优化和去重" >> release_notes.md
        echo "- JSON和XMind格式导出" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 支持平台" >> release_notes.md
        echo "- Windows 10/11 (x64)" >> release_notes.md
        echo "- macOS 10.15+ (Intel/Apple Silicon)" >> release_notes.md
        echo "- Linux (x64)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 安装说明" >> release_notes.md
        echo "1. 下载对应平台的压缩包" >> release_notes.md
        echo "2. 解压到任意目录" >> release_notes.md
        echo "3. 运行可执行文件" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 校验和" >> release_notes.md
        echo "请使用提供的checksums文件验证下载文件的完整性。" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        name: 测试用例生成器 ${{ github.ref_name || github.event.inputs.version }}
        body_path: release_notes.md
        files: |
          TestCaseGenerator-*/TestCaseGenerator-*
          checksums-*/checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.release.result }}" = "success" ]; then
          echo "✅ 构建和发布成功完成!"
        else
          echo "❌ 构建或发布失败"
          exit 1
        fi